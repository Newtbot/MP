<%- include('top') %>
<link href="/css/learnmore.css" rel="stylesheet" />
<script type="text/javascript">
    // Initialize locations object
    function extractNumbers(str) {
        if (typeof str === 'number') return str;
        return str.match(/\d+/)[0];
    }

    const values = {
        psi: [],
        humidity: [],
        temperature: [],
        windspeed: [],
        co: [],
        o3: [],
        no2: [],
        so2: [],
    };

    async function updateLocations() {
        // Wrap the asynchronous location update in a promise
        return new Promise(resolve => {
            app.api.get('location', function (error, data) {
                for (let location of data) {
                    locations[parseInt(location.id, 10)] = location;
                }
                console.log("Updated Locations Object:", locations);
                resolve();
            });
        });
    }

    function parseRowToTemplace(row) {
        const locationName = locations[row.locationid] ? locations[row.locationid].name : 'Unknown Location';
        values.psi.unshift(extractNumbers(row.measurement.psi))
        values.humidity.unshift(extractNumbers(row.measurement.humidity))
        values.temperature.unshift(extractNumbers(row.measurement.temperature))
        values.windspeed.unshift(extractNumbers(row.measurement.windspeed))
        values.co.unshift(extractNumbers(row.measurement.co))
        values.o3.unshift(extractNumbers(row.measurement.o3))
        values.no2.unshift(extractNumbers(row.measurement.no2))
        values.so2.unshift(extractNumbers(row.measurement.so2))

        return {
            latest: {
                locationName,
                psi: extractNumbers(row.measurement.psi),
                humidity: extractNumbers(row.measurement.humidity),
                temperature: extractNumbers(row.measurement.temperature),
                windspeed: extractNumbers(row.measurement.windspeed),
                co: extractNumbers(row.measurement.co),
                o3: extractNumbers(row.measurement.o3),
                no2: extractNumbers(row.measurement.no2),
                so2: extractNumbers(row.measurement.so2),
            }
        };
    }
    
    function getSymbolOrUnit(key) {
        switch (key) {
            case 'psi':
                return ' PSI';
            case 'humidity':
                return ' %';
            case 'temperature':
                return ' °C';
            case 'windspeed':
                return ' m/s';
            case 'co':
                return ' ppm';
            case 'o3':
                return ' ppm';
            case 'no2':
                return ' ppm';
            case 'so2':
                return ' ppm';
            default:
                return '';
        }
    }

    function updateTable(locations) {
    //console.log("Received locations:", locations);

    var tbody = document.getElementById("sensorDataTableBody");

    // Clear existing rows in the table
    tbody.innerHTML = "";

    // Loop through each location
    for (var i = 0; i < locations.length; i++) {
        var locationData = locations[i].latest; // Access the 'latest' property
        //console.log("Location Data from Locations Object:", locationData);

        // Check if the location has the 'locationName' property
        if (locationData.locationName) {
            // Create a new table row
            var row = document.createElement("tr");
            //console.log("Row Object:", row);

            // Loop through the properties of the location
            for (var dataKey in locationData) {
                var cell = document.createElement("td");
                var cellText = document.createTextNode(locationData[dataKey] + getSymbolOrUnit(dataKey));
                cell.appendChild(cellText);
                row.appendChild(cell);
                //console.log("Cell Object:", cell);

            }

            // Append the new row to the table
            tbody.appendChild(row);
        } else {
            //console.log("Location ID not found in Locations Object");
            // Handle the case where locationName is not found, you can log an error or take other actions.
        }
    }
}





const locations = {};
async function loadData() {
    // Populate the locations object
    await updateLocations();

    // Fetch and process sensor data
    app.api.get('latest-sensor-data/data', function (error, data) {
        const uniqueLocationIds = [...new Set(data.map(row => parseInt(row.locationid, 10)))];
        const locationsArray = [];
        //console.log("Sensor Data:", data);
        if (error) {
            console.error("Error fetching sensor data:", error);
            return;
    }
        // Loop through each unique location ID
        for (let locationIdAsNumber of uniqueLocationIds) {
            const locationData = locations[locationIdAsNumber];
            //console.log("Location Data from Locations Object:", locationData);
            const rowData = data.find(row => parseInt(row.locationid, 10) === 7);
            //console.log("Row Data for Location ID:", 7, rowData);
           // console.log("Unique Location IDs:", uniqueLocationIds);


            if (locationData) {
                const locationName = locationData.name;
                //console.log("Resolved Location Name:", locationName);

                // Update the table for each row
                const rowData = data.find(row => parseInt(row.locationid, 10) === locationIdAsNumber);
                //console.log("Row Data for Location ID:", locationIdAsNumber, rowData);

                if (rowData) {
                    $.scope.LatestSensorData.update(parseRowToTemplace(rowData));
                    locationsArray.push(parseRowToTemplace(rowData));
                } else {
                    //console.log("No sensor data found for Location ID:", locationIdAsNumber);
                }
            } else {
                //console.log("Location ID not found in Locations Object");
            }
        }

        // Update the table after processing all locations
        updateTable(locationsArray);
    });

    app.socket.on("sensorData:new", function (data) {
        const locationIdAsNumber = parseInt(data.locationid, 10);
        //console.log("Location ID in Sensor Data:", locationIdAsNumber);

        const locationData = locations[locationIdAsNumber];
        if (locationData) {
            //console.log("Location Data from Locations Object:", locationData);
            const locationName = locationData.name;
            //console.log("Resolved Location Name:", locationName);

            // Update the table for the new data
            $.scope.LatestSensorData.update(parseRowToTemplace(data));
            updateTable(parseRowToTemplace(data));
        } else {
            //console.log("Location ID not found in Locations Object");
        }
    });
}


$(document).ready(loadData);


</script>


<br>
<br>

<div class="container">
    <div class="services-bar" jq-repeat="LatestSensorData">
        <h1 class="my-4">Location Sensor Readings</h1>
        <table>
            <thead>
            <tr>
                <th>Location</th>
                <th>Air quality Index</th>
                <th>Humidity</th>
                <th>Temperature</th>
                <th>Wind Speed</th>
                <th>CO</th>
                <th>O₃</th>
                <th>NO₂</th>
                <th>SO₂</th>
            </tr>
            </thead>
            <tbody id="sensorDataTableBody"></tbody>
        </table>
        <br>
    
        <div class="legend">
            <p>Legend:</p>
            <ul>
                <li><strong>Air Quality Index(AQI): </strong> PSI</li>
                <li style="margin-left: 15px;"><strong> PSI: </strong> Pollutant Standards Index - It is a measure used to communicate how polluted the air currently is. </li>
                <li style="margin-left: 15px;">Note: Higher PSI values indicate poorer air quality.</li>

                <li><strong>Humidity: </strong> %</li>
                <li style="margin-left: 15px;"><strong> %: </strong> Percentage - Represents the percentage of water vapor in the air.</li>
                <li style="margin-left: 15px;">Note: Higher humidity values are neither better nor worse; they simply represent a higher percentage of water vapor in the air.</li>

                <li><strong>Temperature: </strong> °C</li>
                <li style="margin-left: 15px;"><strong> °C: </strong> Degrees Celsius - Indicates the temperature in degrees Celsius.</li>
                <li style="margin-left: 15px;">Note: Interpretation depends on the context. In general, higher temperatures can be considered better or worse depending on personal preferences or specific requirements.</li>

                <li><strong>Wind Speed: </strong> m/s</li>
                <li style="margin-left: 15px;"><strong> m/s: </strong> Meters per Second  - Represents the speed of the wind in meters per second.</li>
                <li style="margin-left: 15px;">Note: Interpretation depends on the context. In some cases, higher wind speeds may be considered better for air circulation, while in other cases, excessive wind speed may be undesirable.</li>

                <li><strong>Carbon Monoxide (CO): </strong> ppm</li>
                <li><strong>Ozone (O₃): </strong> ppm</li>
                <li><strong>Nitrogen Dioxide (NO₂):</strong> ppm</li>
                <li><strong>ulfur Dioxide (SO₂): </strong> ppm</li>
                <li style="margin-left: 15px;"><strong> ppm: </strong> Parts per Million - Measures the concentration in parts per million.</li>
                <li style="margin-left: 15px;">Note: The interpretation depends on the specific substance being measured. In the context of pollutants like CO, O₃, NO₂, and SO₂, higher concentrations are generally considered worse.</li>
            </ul>
        </div>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        
    </div>
</div>

<br>
<br>
<%- include('bot') %>
